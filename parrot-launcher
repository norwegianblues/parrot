#!/usr/bin/env python
# -*- Mode: python; tab-width: 4; indent-tabs-mode:nil; -*-
# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4

########################################################################
# Copyright (c) 2013 Ericsson AB
#
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Eclipse Public License v1.0
# which accompanies this distribution, and is available at
# http://www.eclipse.org/legal/epl-v10.html
#
# Contributors:
#    Ericsson Research - initial implementation
#
########################################################################


import argparse
import logging
import os
import sys
import signal
import SimpleHTTPServer
import SocketServer
from threading import Thread

### Global definitions
logging.basicConfig(level=logging.DEBUG,
                    format='%(levelname)s %(message)s')
ROOT_NAME = 'HODCP_ROOT'
SIMULATION_ROOT_NAME = 'SIMULATION_ROOT'

### Make sure parrot is installed before we continue
try:
    from parrot import simulator
except ImportError:
    logging.error('Parrot not found on PATH. Did you forget something?')
    sys.exit(1)


class ParrotRuntime:
    """Create a runtime that wraps the simulator and the web interface."""

    def __init__(self, args):
        self.args = args
        self._setup_environment()

    def run(self):
        def cleanup(signal, frame):
            sys.exit(0)

        signal.signal(signal.SIGINT, cleanup)
        signal.signal(signal.SIGQUIT, cleanup)
        try:
            self._launch_parrot_web_server(self.args.port)
            self._launch_parrot(self.args.simulation, debug=self.args.debug,
                                interactive=self.args.interactive)
        except SystemExit:
            logging.info('Parrot simulation shutting down.')
        finally:
            logging.info('Bye.')

    def _launch_parrot_web_server_thread(self, port):
        WEB_ROOT = self._get_root_path() + '/web'  # semi-ugly
        logging.info('Parrot will serve web interface from: %s' % WEB_ROOT)
        try:
            os.chdir(WEB_ROOT)
        except OSError:
            logging.error('Could not find WEB_ROOT. Web interface not starting.')
            return

        handler = SimpleHTTPServer.SimpleHTTPRequestHandler
        httpd = SocketServer.TCPServer(("", port), handler)

        logging.info('Parrot web server on %d' % port)
        httpd.serve_forever()

    def _launch_parrot_web_server(self, port):
        t = Thread(target=self._launch_parrot_web_server_thread, args=(port,))
        t.daemon = True
        t.start()

    def _go_interactive(self, simulationfile):
        logging.info('Dropping into interactive shell. ')
        logging.info('Use simulator.run("%s") to start simulation.', simulationfile)

        try:
            import IPython
            IPython.embed()
        except:
            import code
            logging.info('Don\'t forget to run: \'from parrot import simulator\' first.')
            code.interact(local=locals())

    def _launch_parrot(self, simulationfile, debug=False, interactive=False):
        logging.info('Parrot using configuration: %s' % simulationfile)

        if interactive:
            self._go_interactive(simulationfile)
        else:
            if debug:
                logging.info('Debug mode activated. Dropping to PDB.')
                import pdb
                pdb.set_trace()
            # run parrot
            simulator.run(simulationfile, debug=debug)

    def _get_root_path(self):
        return os.path.dirname(simulator.__file__)

    def _get_simulation_root(self):
        simulation_root = None
        try:
            os.chdir(os.path.dirname(os.path.abspath(self.args.simulation)) + '/../nodes')
            simulation_root = os.getcwd()
        except OSError:
            logging.warn('Only bundled node modules available for simulation.')

        return simulation_root

    def _setup_environment(self):
        """
        Eventually it would be better to remove dependencies on environment
        variables completely. This is a step towards that by hiding the
        environment setup from the user.
        """

        if not ROOT_NAME in os.environ:
            os.environ[ROOT_NAME] = self._get_root_path()
        if not os.path.isdir(os.environ.get(ROOT_NAME)):
            logging.error('Parrot root path is invalid.')
            sys.exit(1)

        if args.debug:
            os.environ['PARROT_DEBUG'] = 'TRUE'

        self.args.simulation = os.path.abspath(self.args.simulation)

        simulation_root = self._get_simulation_root()
        sys.path.append(simulation_root)


def parse_arguments():
    """
    Using argparse to read arguments passed to the parrot-launcher
    """
    parser = argparse.ArgumentParser(description='The Parrot Simulator')
    parser.add_argument('-d', '--debug', action='store_true', default=False)
    subparsers = parser.add_subparsers(help='Available commands', dest='subparser_name')

    run_parser = subparsers.add_parser('run', help='Run a simulation')
    run_parser.add_argument('simulation', type=str,
                            help='The configuration file for the simulation')
    run_parser.add_argument('-p', '--port', type=int, default=8000,
                            help='Port to use for the simulator\'s web interface')
    run_parser.add_argument('-i', '--interactive', action='store_true',
                            default=False,
                            help='Drop into Python\'s interactive shell after ' +
                                 'loading environment')

    args = parser.parse_args()

    if args.debug:
        logging.debug('Arguments are: %s' % args)

    return args


if __name__ == '__main__':
    args = parse_arguments()
    if args.subparser_name == 'run':
        runtime = ParrotRuntime(args)
        runtime.run()
